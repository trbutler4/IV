{"ast":null,"code":"var _jsxFileName = \"/home/trbiv/IV/blog-app/src/components/ConnectWalletButton.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { Button } from '@chakra-ui/react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ConnectWalletButton() {\n  _s();\n  const [buttonText, setButtonText] = React.useState(\"Connect Wallet\");\n  async function connectWallet() {\n    const provider = await detectEthereumProvider();\n    if (provider) {\n      console.log(\"Metamask detected!\");\n\n      // get accounts\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).catch(err => {\n        if (err.code === 4001) {\n          console.log(\"user rejected request\");\n        } else {\n          console.log(err);\n        }\n      });\n\n      // connect account \n      const account = accounts[0];\n    } else {\n      console.log(\"metamask not detected\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: connectWallet,\n    children: `${buttonText}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(ConnectWalletButton, \"nsz/42+Crj9Q0mGS1vrX2eYza54=\");\n_c = ConnectWalletButton;\nexport default ConnectWalletButton;\nvar _c;\n$RefreshReg$(_c, \"ConnectWalletButton\");","map":{"version":3,"names":["React","Button","detectEthereumProvider","jsxDEV","_jsxDEV","ConnectWalletButton","_s","buttonText","setButtonText","useState","connectWallet","provider","console","log","accounts","window","ethereum","request","method","catch","err","code","account","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/trbiv/IV/blog-app/src/components/ConnectWalletButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Button,\n} from '@chakra-ui/react';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\ndeclare global {\n    interface Window {\n        ethereum?: any;\n    }\n}\n\nfunction ConnectWalletButton() {\n    const [buttonText, setButtonText] = React.useState(\"Connect Wallet\");\n\n    async function connectWallet() {\n        const provider = await detectEthereumProvider();\n        if (provider) {\n            console.log(\"Metamask detected!\")\n\n            // get accounts\n            const accounts = await window.ethereum.request({ \n                method: 'eth_requestAccounts' \n            }).catch((err: any) => {\n                if (err.code === 4001) {\n                    console.log(\"user rejected request\")\n                } else {\n                    console.log(err)\n                }\n            })\n\n            // connect account \n            const account = accounts[0]\n\n            \n        } else {\n            console.log(\"metamask not detected\")\n        }\n    }\n\n    return (\n        <Button onClick={connectWallet}>{`${buttonText}`}</Button>\n    )\n}\n\nexport default ConnectWalletButton;\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SACIC,MAAM,QACH,kBAAkB;AACzB,OAAOC,sBAAsB,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ/D,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAAC,gBAAgB,CAAC;EAEpE,eAAeC,aAAaA,CAAA,EAAG;IAC3B,MAAMC,QAAQ,GAAG,MAAMT,sBAAsB,CAAC,CAAC;IAC/C,IAAIS,QAAQ,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;;MAEjC;MACA,MAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAC3CC,MAAM,EAAE;MACZ,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAQ,IAAK;QACnB,IAAIA,GAAG,CAACC,IAAI,KAAK,IAAI,EAAE;UACnBT,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACxC,CAAC,MAAM;UACHD,OAAO,CAACC,GAAG,CAACO,GAAG,CAAC;QACpB;MACJ,CAAC,CAAC;;MAEF;MACA,MAAME,OAAO,GAAGR,QAAQ,CAAC,CAAC,CAAC;IAG/B,CAAC,MAAM;MACHF,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACxC;EACJ;EAEA,oBACIT,OAAA,CAACH,MAAM;IAACsB,OAAO,EAAEb,aAAc;IAAAc,QAAA,EAAG,GAAEjB,UAAW;EAAC;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAElE;AAACtB,EAAA,CA/BQD,mBAAmB;AAAAwB,EAAA,GAAnBxB,mBAAmB;AAiC5B,eAAeA,mBAAmB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}